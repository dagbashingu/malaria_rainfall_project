---
title: "Malaria Transmission Trend with Rainfall patterns"
format: dashboard
theme: superhero
---

```{python}
import plotly.express as px
import pandas as pd
import warnings
warnings.simplefilter(action='ignore', category=pd.errors.SettingWithCopyWarning)
import plotly.graph_objects as go

p = px.line(y = [1,2,3,4])
```

```{python}
cases = pd.read_csv("data/Malaria Cases.csv")
```

```{python}
rainfall_data = pd.read_csv("data/Rainfall_Data.csv")
```

```{python}
benue_rainfall_data = rainfall_data.query("State == 'Benue'")
```

```{python}
benue_rainfall_data["Period"] = benue_rainfall_data["Period"] = pd.to_datetime(
    benue_rainfall_data["Period"], format="%m/%d/%Y"
)
```

```{python}
fig_rain = px.line(
    benue_rainfall_data,
    x="Period",
    y="Rainfall average (mm)",  # Example: plotting value1
    title="Test positivity rate trend",
    labels={"value1": "Value 1 (Sum)", "region": "Region"},
)
```



```{python}
cases["Period"] = cases["Period"] = pd.to_datetime(cases["Period"], format="%m/%d/%Y")

```

```{python}
# Define filter criteria
selected_state = "Benue"
start_date = "2023-01-01"
end_date = "2023-12-31"

# Filter for both region and date range
filtered_cases = cases[
    (cases["State"] == selected_state)
    & (cases["Period"] >= start_date)
    & (cases["Period"] <= end_date)
]


```

```{python}

filtered_cases=(
    filtered_cases.groupby(["State", "Period"])
    .agg(
        total_cases=("malariia_cases", "sum"),
        average_tpr=("Malaria Test Positivity Rate", "mean"),
        
    )
    .reset_index()
)
```

```{python}
fig = px.line(
    filtered_cases,
    x="Period",
    y="average_tpr",  # Example: plotting value1
    title="Test positivity rate trend",
    labels={"value1": "Value 1 (Sum)", "region": "Region"}
)

```

```{python}
cases_rainfall = pd.merge(filtered_cases, benue_rainfall_data, on=["State", "Period"])
```

```{python}

# Creating a line chart using Plotly Graph Objects
fig_cases_rainfall = go.Figure()

# Add rainfall data
fig_cases_rainfall.add_trace(
    go.Scatter(
        x=cases_rainfall["Period"],
        y=cases_rainfall["Rainfall average (mm)"],
        mode="lines+markers",
        name="Rainfall (mm)",
        line=dict(color="blue"),
        marker=dict(size=8),
    )
)

# Add malaria data
fig_cases_rainfall.add_trace(
    go.Scatter(
        x=cases_rainfall["Period"],
        y=cases_rainfall["total_cases"],
        mode="lines+markers",
        name="Malaria Cases",
        line=dict(color="red", dash="dash"),
        marker=dict(size=8),
    )
)

# Update layout for dual y-axes
fig_cases_rainfall.update_layout(
    title="Alignment of Malaria Transmission Pattern with Rainfall",
    xaxis=dict(title="Month"),
    yaxis=dict(
        title="Rainfall (mm)",
        titlefont=dict(color="blue"),
        tickfont=dict(color="blue"),
    ),
    yaxis2=dict(
        title="Malaria Cases",
        titlefont=dict(color="red"),
        tickfont=dict(color="red"),
        overlaying="y",
        side="right",
    ),
    legend=dict(x=0.1, y=1.2),  # Adjust legend position
    template="plotly_white",
)


```

```{python}
tips = px.data.tips()
num_cols = tips.shape[1]
num_rows = tips.shape[0]
```

# Malaria cases

## {height="20%"}

::: {.valuebox title="2023 malaria Cases" color="primary" icon="heart"}


Few columns
:::
::: {.valuebox title="2023 malaria incidence" color="secondary" icon="arrow-down"}


Many rows
:::
::: {.valuebox title="2023 Avg malaria test positivity rate" color="#5ba3b6" icon="bar-chart"}
1
:::

##

## Row {.tabset height="70%"}

### Malaria cases trend
```{python}
p
```

### Malaria incidence trend

```{python}
p
```
### Malaria test positivity trend

```{python}
fig
```

# Rainfall pattern

## {height="20%"}

::: {.valuebox title="2023-Q1 Avg Rainfall" color="primary" icon="heart"}


Few columns
:::
::: {.valuebox title="2023-Q2 Avg Rainfall" color="secondary" icon="arrow-down"}


Many rows
:::
::: {.valuebox title="2023-Q3 Avg Rainfall" color="#5ba3b6" icon="bar-chart"}
1
:::

::: {.valuebox title="2023-Q4 Avg Rainfall" color="#5ba3b6" icon="bar-chart"}
1
:::

##

```{python}
p
```

# Malaria vs Rainfall pattern

## Row {.tabset height="100%"}

### Malaria cases vs Rainfall
```{python}
fig_cases_rainfall
```

### Malaria incidence vs Rainfall

```{python}
p
```

### Malaria test positivity rate vs Rainfall

```{python}
p
```


