---
title: "Malaria Transmission Trend with Rainfall patterns"
format: 
  dashboard:
    logo: images/mosquito.jpeg
    nav-buttons: [linkedin, twitter, github]
theme: superhero
execute:
  echo: false
---

```{python}
import plotly.express as px
import pandas as pd
import warnings
warnings.simplefilter(action='ignore', category=pd.errors.SettingWithCopyWarning)

import matplotlib.pyplot as plt
import itables

p = px.line(y = [1,2,3,4])
```

```{python}
cases = pd.read_csv("data/Malaria Cases.csv")
```

```{python}
rainfall_data = pd.read_csv("data/Rainfall_Data.csv")
```

```{python}
benue_rainfall_data = rainfall_data.query("State == 'Benue'")
```

```{python}
benue_rainfall_data["Period"] = benue_rainfall_data["Period"] = pd.to_datetime(
    benue_rainfall_data["Period"], format="%m/%d/%Y"
)
```

```{python}
fig_rain = px.line(
    benue_rainfall_data,
    x="Period",
    y="Rainfall average (mm)",  # Example: plotting value1
    title="Rain pattern",
    labels={"value1": "Value 1 (Sum)", "region": "Region"},
)
```



```{python}
cases["Period"] = cases["Period"] = pd.to_datetime(cases["Period"], format="%m/%d/%Y")

```

```{python}
# Define filter criteria
selected_state = "Benue"
start_date = "2023-01-01"
end_date = "2023-12-31"

# Filter for both region and date range
filtered_cases = cases[
    (cases["State"] == selected_state)
    & (cases["Period"] >= start_date)
    & (cases["Period"] <= end_date)
]


```

```{python}
cases_LGA = (
    filtered_cases.groupby(["LGA"])
    .agg(
        total_cases=("malaria_cases", "sum")
        
    )
    .reset_index()
)
```

```{python}
# Sort the data by total_cases
cases_LGA_sorted = cases_LGA.sort_values(by="total_cases", ascending=True)

# Create a bar chart
fig_cases_lga = px.bar(
    cases_LGA_sorted,
    x="total_cases",
    y="LGA",
    title="Total Malaria Cases by LGA",
    labels={"total_cases": "Total Cases", "LGA": "Local Government Area (LGA)"},
    orientation="h",  # Horizontal bar chart
)

# Update layout for better readability
fig_cases_lga.update_layout(
    title_font_size=18,
    xaxis_title_font_size=14,
    yaxis_title_font_size=14,
    template="plotly_white",
)

# Show the chart
#fig_cases_lga.show()
```

```{python}
total_cases = round(filtered_cases["malaria_cases"].sum().item(), 1)
incidence = round(total_cases / 7077181 * 1000, 1)
tpr = float(round(filtered_cases["Malaria Test Positivity Rate"].mean(), 1))

```

```{python}
filtered_cases["quarter"] = filtered_cases['Period'].dt.quarter
benue_rainfall_data["quarter"] = benue_rainfall_data['Period'].dt.quarter

```

```{python}
quarter_rainfall = round((
    benue_rainfall_data.groupby(["quarter"])
    .agg(average_rainfall=("Rainfall average (mm)", "mean"))
    .reset_index()
),1)
```

```{python}
q1_rain = quarter_rainfall.loc[0, "average_rainfall"].item()
q2_rain = quarter_rainfall.loc[1, "average_rainfall"].item()
q3_rain = quarter_rainfall.loc[2, "average_rainfall"].item()
q4_rain = quarter_rainfall.loc[3, "average_rainfall"].item()

```

```{python}

filtered_cases = (
    filtered_cases.groupby(["State", "Period"])
    .agg(
        total_cases=("malaria_cases", "sum"),
        average_tpr=("Malaria Test Positivity Rate", "mean"),
    )
    .reset_index()
)
```


```{python}
fig_tpr = px.line(
    filtered_cases,
    x="Period",
    y="average_tpr",  # Example: plotting value1
    title="Test positivity rate trend",
    labels={"value1": "Value 1 (Sum)", "region": "Region"}
)

```

```{python}
fig_cases = px.line(
    filtered_cases,
    x="Period",
    y="total_cases",  # Example: plotting value1
    title="Malaria cases trend",
    labels={"value1": "Value 1 (Sum)", "region": "Region"}
)
```


```{python}
cases_rainfall = pd.merge(filtered_cases, benue_rainfall_data, on=["State", "Period"])
```

```{python}

fig_cases_rainfall, ax1 = plt.subplots(figsize=(10, 6))

# Plot rainfall data
ax1.plot(
    cases_rainfall["Period"],
    cases_rainfall["Rainfall average (mm)"],
    color="blue",
    marker="o",
    label="Rainfall (mm)",
    linewidth=2,
)
ax1.set_xlabel("Month", fontsize=12)
ax1.set_ylabel("Rainfall (mm)", color="blue", fontsize=12)
ax1.tick_params(axis="y", labelcolor="blue")
ax1.grid(visible=True, which="major", linestyle="--", alpha=0.6)

# Create a second y-axis for malaria cases
ax2 = ax1.twinx()
ax2.plot(
    cases_rainfall["Period"],
    cases_rainfall["total_cases"],
    color="red",
    marker="o",
    linestyle="--",
    label="Malaria Cases",
    linewidth=2,
)
ax2.set_ylabel("Malaria Cases", color="red", fontsize=12)
ax2.tick_params(axis="y", labelcolor="red")

# Add a title
plt.title(
    "Alignment of Malaria Transmission Pattern with Rainfall", fontsize=14, pad=20
)

# Add legends
fig_cases_rainfall.legend(
    loc="upper center",
    bbox_to_anchor=(0.5, 1.1),
    ncol=2,
    fontsize=12,
)






```

```{python}
fig_tpr_rainfall, ax1 = plt.subplots(figsize=(10, 6))

# Plot rainfall data
ax1.plot(
    cases_rainfall["Period"],
    cases_rainfall["Rainfall average (mm)"],
    color="blue",
    marker="o",
    label="Rainfall (mm)",
    linewidth=2,
)
ax1.set_xlabel("Month", fontsize=12)
ax1.set_ylabel("Rainfall (mm)", color="blue", fontsize=12)
ax1.tick_params(axis="y", labelcolor="blue")
ax1.grid(visible=True, which="major", linestyle="--", alpha=0.6)

# Create a second y-axis for malaria cases
ax2 = ax1.twinx()
ax2.plot(
    cases_rainfall["Period"],
    cases_rainfall["average_tpr"],
    color="red",
    marker="o",
    linestyle="--",
    label="TPR",
    linewidth=2,
)
ax2.set_ylabel("Test positivity rate (TPR)", color="red", fontsize=12)
ax2.tick_params(axis="y", labelcolor="red")

# Add a title
plt.title(
    "Alignment of Test positivity Rate with Rainfall pattern", fontsize=14, pad=20
)

# Add legends
fig_tpr_rainfall.legend(
    loc="upper center",
    bbox_to_anchor=(0.5, 1.1),
    ncol=2,
    fontsize=12,
)



```
# Malaria cases

## {height="30%"}

::: {.valuebox title="2023 malaria Cases" color="primary" icon="heart"}
`{python} total_cases`

Annual cases
:::
::: {.valuebox title="2023 malaria incidence" color="secondary" icon="arrow-down"}
`{python} incidence`

Annual malaria incidence
:::

::: {.valuebox title="2023 Avg malaria test positivity rate" color="#5ba3b6" icon="bar-chart"}
`{python} tpr`

Average test positivity rate
:::

## Row {height="60%"}

### Malaria cases
#### {width="33.3}
```{python}
fig_cases
```
#### {width="33.3"}

```{python}
fig_cases_lga
```
#### {width="33.3"}

```{python}
fig_tpr
```

# Rainfall pattern

## {height="30%"}

::: {.valuebox title="2023-Q1 Avg Rainfall" color="primary" icon="stars"}


`{python} q1_rain`
:::
::: {.valuebox title="2023-Q2 Avg Rainfall" color="secondary" icon="stars"}


`{python} q2_rain`
:::
::: {.valuebox title="2023-Q3 Avg Rainfall" color="#5ba3b6" icon="stars"}
`{python} q3_rain`
:::

::: {.valuebox title="2023-Q4 Avg Rainfall" color="#5ba3b6" icon="stars"}
`{python} q4_rain`
:::

##

```{python}
fig_rain
```

# Malaria vs Rainfall pattern

## Row {.tabset height="100%"}

### Malaria cases vs Rainfall
```{python}
fig_cases_rainfall
```

### Malaria test positivity rate vs Rainfall

```{python}
fig_tpr_rainfall
```
# Data
```{python}
itables.show(
    cases_LGA,
    caption="Malaria cases by LGAs in Benue state (2023)",
    buttons=["csvHtml5"],
)
```

